#include <Windows.h>

#include "Ball.h"



//////////////////////////////////////////////////////////////////////
//	コンストラクタ
//////////////////////////////////////////////////////////////////////
Ball::Ball()
{
	height = 0;
	prev = 0;
	isBounce = false;
	t = 0.0f;
}

//////////////////////////////////////////////////////////////////////
//	デストラクタ
//////////////////////////////////////////////////////////////////////
Ball::~Ball()
{
}

//////////////////////////////////////////////////////////////////////
//	Init
//		初期化処理
//////////////////////////////////////////////////////////////////////
void Ball::Init( int x, int y, int dx, int dy, int speed, int radius )
{
	height = GAME_HEIGHT;
	SetPosition( x, y );
	SetDirection( dx, dy );
	SetSpeed( speed );
	SetRadius( radius );
}

//////////////////////////////////////////////////////////////////////
//	Update
//		更新処理
//////////////////////////////////////////////////////////////////////
void Ball::Update()
{
	GetY() < (height - GetRadius()) && isBounce == false ? Move() : Bounce(height);
}

//////////////////////////////////////////////////////////////////////
//	Draw
//		描画処理
//////////////////////////////////////////////////////////////////////
void Ball::Draw( HDC hdc )
{
	Ellipse( hdc, GetLeft(), GetTop(), GetRight(), GetBottom() );
}

//////////////////////////////////////////////////////////////////////
//	SetX()
//////////////////////////////////////////////////////////////////////
void Ball::SetX( int x )
{
	_x = x;
}

//////////////////////////////////////////////////////////////////////
//	Move
//		移動処理
//////////////////////////////////////////////////////////////////////
void Ball::Move()
{
	t += 0.1f;

	SetSpeed(GetSpeed() + 1.0f);
	_x += ( _dx * _speed * t);
	_y += ( _dy * _speed * t);

}

//////////////////////////////////////////////////////////////////////
//	SetY()
//////////////////////////////////////////////////////////////////////
void Ball::SetY( int y )
{
	_y = y;
}

//////////////////////////////////////////////////////////////////////
//	SetDx()
//////////////////////////////////////////////////////////////////////
void Ball::SetDx( int dx )
{
	_dx = dx;
}

//////////////////////////////////////////////////////////////////////
//	SetDy()
//////////////////////////////////////////////////////////////////////
void Ball::SetDy( int dy )
{
	_dy = dy;
}

//////////////////////////////////////////////////////////////////////
//	SetSpeed()
//////////////////////////////////////////////////////////////////////
void Ball::SetSpeed(float speed)
{
	_speed = speed;
}

//////////////////////////////////////////////////////////////////////
//	SetRadius()
//////////////////////////////////////////////////////////////////////
void Ball::SetRadius( int radius )
{
	_radius = radius;
}

//////////////////////////////////////////////////////////////////////
//	SetPosition()
//////////////////////////////////////////////////////////////////////
void Ball::SetPosition( int x, int y )
{
	SetX( x );
	SetY( y );
}

//////////////////////////////////////////////////////////////////////
//	SetDirection()
//////////////////////////////////////////////////////////////////////
void Ball::SetDirection( int dx, int dy )
{
	SetDx( dx );
	SetDy( dy );
}


//////////////////////////////////////////////////////////////////////
//	GetX()
//////////////////////////////////////////////////////////////////////
int Ball::GetX()
{
	return	_x;
}

//////////////////////////////////////////////////////////////////////
//	GetY()
//////////////////////////////////////////////////////////////////////
int Ball::GetY()
{
	return	_y;
}

//////////////////////////////////////////////////////////////////////
//	GetTop()
//////////////////////////////////////////////////////////////////////
int Ball::GetTop()
{
	return	_y - _radius;
}

//////////////////////////////////////////////////////////////////////
//	GetBottom()
//////////////////////////////////////////////////////////////////////
int Ball::GetBottom()
{
	return	_y + _radius;
}

//////////////////////////////////////////////////////////////////////
//	GetLeft()
//////////////////////////////////////////////////////////////////////
int Ball::GetLeft()
{
	return	_x - _radius;
}

//////////////////////////////////////////////////////////////////////
//	GetRight()
//////////////////////////////////////////////////////////////////////
int Ball::GetRight()
{
	return	_x + _radius;
}

//////////////////////////////////////////////////////////////////////
//	GetRect()
//////////////////////////////////////////////////////////////////////
RECT Ball::GetRect()
{
	return { GetLeft(), GetTop(), GetRight(), GetBottom() };
}

//////////////////////////////////////////////////////////////////////
//	GetRect()
//////////////////////////////////////////////////////////////////////
void Ball::GetRect( RECT* rect )
{
	rect->left = GetLeft();
	rect->top = GetTop();
	rect->right = GetRight();
	rect->bottom = GetBottom();
}

//////////////////////////////////////////////////////////////////////
//	GetDx()
//////////////////////////////////////////////////////////////////////
int Ball::GetDx()
{
	return	_dx;
}

//////////////////////////////////////////////////////////////////////
//	GetDy()
//////////////////////////////////////////////////////////////////////
int Ball::GetDy()
{
	return	_dy;
}

//////////////////////////////////////////////////////////////////////
//	GetSpeed()
//////////////////////////////////////////////////////////////////////
float Ball::GetSpeed()
{
	return	_speed;
}

//////////////////////////////////////////////////////////////////////
//	GetSize()
//////////////////////////////////////////////////////////////////////
int Ball::GetRadius()
{
	return	_radius;
}

// バウンド
void Ball::Bounce(int fall)
{
	isBounce = true;

	// 速度が0以上の時
	if (GetY() > (fall / 2) && GetSpeed() > 0)
	{
		t -= 0.1f;
		SetSpeed(GetSpeed() - 1.0f);
		_x -= (_dx * _speed * t);
		_y -= (_dy * _speed * t);
	}
	else
	{
		// 跳ね返り終了
		if (GetSpeed() > 0 )
		{
			t = 0.0f;
			isBounce = false;
			prev = height / 2;
			height = prev + GAME_HEIGHT / 2;
		}
		else if (GetY() < (GAME_HEIGHT - GetRadius()))
		{
			// 半強制的に落とす
			t = 3.0f;
			Move();
		}
	}
}